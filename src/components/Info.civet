import { Component, createMemo, createSignal, JSXElement, onCleanup, onMount } from "solid-js"
import { Transition } from "solid-transition-group"
import { Adversary } from "../model.civet"
import { delay } from "../util.civet"
import { tutorial } from "../tutorial.civet"
import Emph from "./Emph.civet"

messages: [JSXElement, number][] := [
  [<>Bienvenue sur l'appli' <Emph>Catch the lion</Emph>.</>, 3000]
  [<><Emph>Catch the lion</Emph> connu en japonais sous le nom <Emph>Dobutsu Shogi</Emph> est une variante pour enfants du Shogi.</>, 5000]
  [<>Le jeu a été entièrement résolu par ordinateur. Il existe <Emph>1 567 925 964</Emph> configurations possibles.</>, 5000]
  [<>Si les deux joueurs jouent de manière optimale, la victoire est assurée pour le <Emph>second</Emph> joueur.</>, 5000]
  [<>Pour apprendre les règles, tu peux clicker sur <Emph>Tutoriel</Emph>.</>, 3000]
]

type InfoComponent = Component<{
  outcome: null | 0 | 1 | 2
  adversary: Adversary
  isThinking: boolean
  tutorialStep: number | null
  tutorialNext: () => void
  tutorialPred: () => void
}>

const Info: InfoComponent = (props) =>
  [periodicMessage, setPeriodicMessage] := createSignal<JSXElement | null> ""
  stop .= false

  onMount(async () =>
    i .= 0
    while true
      d := messages[i][1]
      setPeriodicMessage messages[i][0]
      await delay d
      setPeriodicMessage null
      i = (i + 1) % messages.length
      if stop
        break
      await delay 1500
  )

  onCleanup(() =>
    stop = true
  )

  message := createMemo( =>
    if props.tutorialStep !== null
    then tutorial[props.tutorialStep].text
    else if props.outcome !== null
    then (
      if props.outcome === 2
      then <>Oh, cette configuration de pièces a été répétée 3 fois. C&apos;est un <Emph>match nul</Emph></>
      else if props.adversary === 'human'
      then `Bravo! Le joueur ${props.outcome + 1} a gagné!`
      else if props.outcome === 0
      then <>Zut! J&apos;ai perdu! Tu peux changer de difficulté en cliquant sur <Emph>Nouvelle partie</Emph></>
      else <>Oh oui! J&apos;ai gagné! Tu peux changer de difficulté en cliquant sur <Emph>Nouvelle partie</Emph></>
    )
    else
      periodicMessage()
  )

  girlExpression := createMemo =>
    if props.isThinking
    then "bg-thinking"
    else if props.outcome === 2
    then "bg-surprised"
    else if props.outcome !== null && props.outcome === 0 && props.adversary !== 'human'
    then "bg-crying"
    else if props.outcome !== null && (props.outcome === 1 || props.adversary === 'human')
    then "bg-happy"
    else "bg-speaking"

  <div class=`z-20 relative w-[15rem] h-[25rem] bg-contain bg-no-repeat ${girlExpression()}`>
    <Transition
      onEnter={(el, done) => {
        a := el.animate([
          { opacity: 0 },
          { opacity: 1 }], {
          duration: 500
        })
        a.finished.then(done)
      }}
      onExit={(el, done) =>
        a := el.animate([
          { opacity: 1 },
          { opacity: 0 }], {
          duration: 500
        })
        a.finished.then(done)
      }
    >
      {message() && <div class="tooltip -right-5">{message()}}
    {props.tutorialStep !== null &&
      <div class="absolute -right-2 flex gap-32">
        <button class="tutorial-button" onClick={props.tutorialPred}>Précédent
        <button class="tutorial-button" onClick={props.tutorialNext}>Suivant
    }

export default Info